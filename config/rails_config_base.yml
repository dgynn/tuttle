---
:asset_host:
  Sets the host for the assets. Useful when CDNs are used for hosting assets,
  or when you want to work around the concurrency constraints built-in in browsers
  using different domain aliases. Shorter version of config.action_controller.asset_host.
:beginning_of_week:
  Sets the default beginning of week for the application. Accepts
  a valid week day symbol (e.g. :monday).
:cache_classes:
  Controls whether or not application classes and modules should be
  reloaded on each request. Defaults to false in development mode, and true in test
  and production modes.
:consider_all_requests_local:
  Is a flag. If true then any error will cause detailed debugging information to
  be dumped in the HTTP response, and the Rails::Info controller will show the
  application runtime context in /rails/info/properties.
:colorize_logging:
  Specifies whether or not to use ANSI color codes when logging information.
  Defaults to true.
:eager_load:
  When true, eager loads all registered config.eager_load_namespaces. This
  includes your application, engines, Rails frameworks and any other registered namespace.
:eager_load_namespaces:
  Registers namespaces that are eager loaded when config.eager_load
  is true. All namespaces in the list must respond to the eager_load! method.
:eager_load_paths:
  Accepts an array of paths from which Rails will eager load on boot
  if cache classes is enabled. Defaults to every folder in the app directory of the
  application.
:encoding:
  Sets up the application-wide encoding. Defaults to UTF-8.
:exceptions_app:
  Sets the exceptions application invoked by the ShowException middleware
  when an exception happens. Defaults to ActionDispatch::PublicExceptions.new(Rails.public_path).
:filter_parameters:
  Used for filtering out the parameters that you don't want shown
  in the logs, such as passwords or credit card numbers. By default, Rails filters
  out passwords by adding Rails.application.config.filter_parameters += [:password]
  in config/initializers/filter_parameter_logging.rb. Parameters filter works by partial
  matching regular expression.
:force_ssl:
  'Forces all requests to be served over HTTPS by using the ActionDispatch::SSL
  middleware, and sets config.action_mailer.default_url_options to
  be { protocol: ''https'' }.
  This can be configured by setting config.ssl_options - see the ActionDispatch::SSL
  documentation for details.'

:log_formatter:
  Defines the formatter of the Rails logger. This option defaults to an instance
  of ActiveSupport::Logger::SimpleFormatter for all modes except production,
  where it defaults to Logger::Formatter.

:log_level:
  Defines the verbosity of the Rails logger. This option defaults to :debug for all environments.

:log_tags:
  Accepts a list of methods that the request object responds to. This makes it
  easy to tag log lines with debug information like subdomain and request id -
  both very helpful in debugging multi-user production applications.

:logger:
  Accepts a logger conforming to the interface of Log4r or the default Ruby
  Logger class. Defaults to an instance of ActiveSupport::Logger.

:middleware:
  Allows you to configure the application's middleware. This is covered in depth
  in the Configuring Middleware of the Ruby Guide.

:reload_classes_only_on_change:
  Enables or disables reloading of classes only when tracked files change.
  By default tracks everything on autoload paths and is set to true.
  If config.cache_classes is true, this option is ignored.

:serve_static_files:
  Configures Rails itself to serve static files. Defaults to true, but in the
  production environment is turned off as the server software (e.g. NGINX or Apache)
  used to run the application should serve static assets instead.
  Unlike the default setting set this to true when running (absolutely not recommended!)
  or testing your app in production mode using WEBrick.
  Otherwise you won't be able use page caching and requests for files that exist
  regularly under the public directory will anyway hit your Rails app.

:session_store:
  Is usually set up in config/initializers/session_store.rb and specifies what class to use to
  store the session. Possible values are :cookie_store which is the default, :mem_cache_store, and :disabled.
  The last one tells Rails not to deal with sessions. Custom session stores can also be specified.

:time_zone:
  Sets the default time zone for the application and enables time zone awareness for Active Record.
