<h1>Rails Overview</h1>

<pre>
Rails Version = <%= Rails::VERSION::STRING %>
Environment = <%= Rails.env %>
Root = <%= Rails.root %>
Timezone = <%= Rails.configuration.time_zone %>
Log Level = <%= Rails.configuration.log_level %>
</pre>

<ul class="nav nav-tabs" role="tablist">
  <li class="active"><a href="#config" role="tab" data-toggle="tab">Configuration</a></li>
  <li><a href="#load_paths" role="tab" data-toggle="tab">Load Paths</a></li>
  <li><a href="#initializers" role="tab" data-toggle="tab">Initializers</a></li>
  <li><a href="#middleware" role="tab" data-toggle="tab">Middleware</a></li>
  <li><a href="#railties" role="tab" data-toggle="tab">Railties</a></li>
  <li><a href="#timedate" role="tab" data-toggle="tab">Time and Date Formats</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="config">
    <p>
      Rails configuration is managed through the applications's <code>config/application.rb</code>,
      an environment-specific configuration file, and initializers from
      the <code>config/initializers</code> directory.
    </p>
    <p>
      The Rails Guide <a href="<%= rails_guides_versioned_url('configuring.html') %>">Configuring Rails Applications</a>
      has a mostly-complete list of the options available.
    </p>
    <p>
      The combined results of these configurations are shown here.
    </p>
    <table class="table table-condensed">
      <tr>
        <th>Setting</th>
        <th>Value</th>
        <th>Description</th>
      </tr>
      <% @config_options.each do |key, description| %>
        <tr data-config-key="<%= key %>">
          <td>config.<%= key %></td>
          <td><code><%= Rails.configuration.send(key).inspect rescue 'ERROR'%></code></td>
          <td><%= description %></td>
        </tr>
      <% end %>
    </table>

    <div class="panel panel-warning hidden">
      <div class="panel-heading">
        <h4 class="panel-title" data-toggle="collapse" data-target="#rails_config_instances">Instance Variables</h4>
      </div>
      <div id="rails_config_instances" class="panel-body collapse">
        <dl class="dl-horizontal">
          <%- Rails.configuration.instance_variables.sort.each do |symbol| %>
              <dt><%= symbol %></dt>
              <dd><samp><%= Rails.configuration.instance_variable_get(symbol) %></samp></dd>
          <%- end %>
        </dl>
      </div>
    </div>
  </div>
  <div class="tab-pane" id="load_paths">
    <p>
      Rails will load code based on the configured load paths with the
      help of ActiveSupport.
    </p>
    <ul>
      <li>
        Autoload - Files will be searched here to auto
        load classes based on naming convention
      </li>
      <li>
        Autoload Once - A subset of autoload that will not be reloaded
        when class caching is disabled (default for development)
      </li>
      <li>
        Eager Load - All classes here will be loaded when eager loading
        is configured (default for production)
      </li>
    </ul>
    <p>
      The runtime load paths are determined by configuration (typically in
      <code>application.rb</code>), Rails' default load paths
      (e.g. <code>app/*</code>), paths contributed by Engines, and direct API
      calls to <code>ActiveSupport::Dependecies</code>.
    </p>
    <p>
      <i>Ideally, all directories should exist.</i>
    </p>

    <%- all_load_paths = (Rails.application.send(:_all_load_paths) + ActiveSupport::Dependencies.autoload_paths).uniq -%>

    <%- all_autoload_paths = Rails.application.send(:_all_autoload_paths) -%>
    <%- all_autoload_once_paths = Rails.application.send(:_all_autoload_once_paths) -%>

    <%- config_eager_load_paths = Rails.configuration.eager_load_paths -%>
    <%- config_autoload_paths = Rails.configuration.autoload_paths -%>
    <%- config_autoload_once_paths = Rails.configuration.autoload_once_paths -%>

    <h3>Load Paths</h3>

    <table class="table table-condensed">
      <tr>
        <th>Path</th>
        <th>Autoload?</th>
        <th>Autoload Once?</th>
        <th>Eager Load?</th>
        <th>Config Autoload?</th>
        <th>Config Autoload Once?</th>
        <th>Exists?</th>
      </tr>
      <% all_load_paths.each do |path| %>
        <tr>
          <td><%= display_path(path) %></td>
          <td><%= truth_label(all_autoload_paths.include?(path)) %></td>
          <td><%= truth_label(all_autoload_once_paths.include?(path)) %></td>
          <td><%= truth_label(config_eager_load_paths.include?(path)) %></td>
          <td><%= truth_label(config_autoload_paths.include?(path)) %></td>
          <td><%= truth_label(config_autoload_once_paths.include?(path)) %></td>
          <td><%= truth_label(File.directory?(path)) %></td>
        </tr>
      <% end %>
    </table>
  </div>
  <div class="tab-pane" id="initializers">
    <p>
      <a href="<%= rails_guides_versioned_url('configuring.html#using-initializer-files') %>">Rails initializers</a> are blocks of code that run during application initialization.
      Initializers can be provided by any Railtie, which includes Rails components themselves as well as many Gems.
    </p>
    <p>
      All files in your <code>config/initializers</code> directory will be loaded by the <code>:load_config_initializers</code> initializer
    </p>

    <%
      special_hooks = [:bootstrap_hook, :run_prepare_callbacks, :eager_load!, :finisher_hook]
    %>

    <p></p>
    <table class="table table-condensed">
      <tr><th>#</th><th>Name</th><th>Context Class or File Location</th><th>Group</th><th>After</th><th>Before</th></tr>
      <%- idx = 0 %>
      <% ActiveSupport.instance_variable_get(:@load_hooks)[:before_configuration].each do |k, _v| %>
        <tr>
          <td></td>
          <td>:before_configuration hook</td>
          <td colspan="4"><code><%= display_source_locaction(*k.source_location) %></code></td>
        </tr>
      <% end %>
    <%- Rails.application.initializers.tsort_each do |initializer| %>
      <%- options = initializer.instance_variable_get('@options'.freeze) %>
      <tr>
        <td><%= idx+=1 %></td>
        <td><%= initializer.name.inspect %></td>
        <td><%= initializer.instance_variable_get('@context'.freeze).class.name %></td>
        <td><%= options.try(:[],:group).try(:inspect) %></td>
        <td><%= options.try(:[],:after).try(:inspect) %></td>
        <td><%= options.try(:[],:before).try(:inspect) %></td>
      </tr>
        <% if initializer.name == :load_config_initializers %>
          <% initializer.instance_variable_get('@context'.freeze).config.paths["config/initializers"].existent.sort.each do |initializer_file| %>
            <tr>
            <td></td>
            <td>--&gt; config_initializer file</td>
            <td colspan="4"><code><%= file_location(initializer_file) %></code></td>
            </tr>
          <% end %>
        <% end %>
      <% if special_hooks.include?(initializer.name) %>
        <%
          # TODO: Add special handling blocks for these cases
          special_hook_load = case initializer.name
                          when :bootstrap_hook
                            :before_initialize
                          when :run_prepare_callbacks
                            # TODO: this is not correct. to_prepare blocks are not in load_hooks
                            :to_prepare
                          when :eager_load!
                            :before_eager_load
                          when :finisher_hook
                            :after_initialize
                          end
        %>
          <% ActiveSupport.instance_variable_get(:@load_hooks)[special_hook_load].each do |k, _v| %>
            <tr>
              <td></td>
              <td>--&gt; <%= special_hook_load.inspect %></td>
              <td colspan="4"><code><%= display_source_locaction(*k.source_location) %></code></td>
            </tr>
          <%- end %>
        <%- end %>
    <%- end %>
    </table>
  </div>

  <div class="tab-pane" id="middleware">
    <p>The Rack middleware configuration shows the modules in the Rack stack that will process the request and response.</p>
    <ol>
      <%- Rails.application.middleware.each do |middleware| %>
          <li><%= middleware.name %></li>
      <%- end %>
    </ol>
  </div>
  <div class="tab-pane" id="railties">
    <p>
      Railties are components of the Rails framework or any other component that needs to interact directly with the framework.
    </p>
    <p>
      The configuration order of the Railties can be specified if necessary.
    </p>
    <p>
      Rails configuration.railties_order = <%= Rails.configuration.railties_order %>
    </p>
    <ol>
      <%- # TODO: protected methods `ordered_railties` changed to return an array of arrays between rails 4.1.5 and 4.1.8. investigate and replace. -%>
      <%- ordered_railties = Rails.application.send(:ordered_railties) -%>
      <%- ordered_railties = ordered_railties[0] if ordered_railties.is_a?(Array) && ordered_railties[0].is_a?(Array) -%>
      <%- ordered_railties.each do |railtie| %>
          <li><%= railtie.railtie_name %> - <%= railtie.class.name %></li>
      <%- end %>
    </ol>
  </div>
  <div class="tab-pane" id="timedate">
    <p>
      Rails date and time formats are usually configured in a config/initializers/date_formats.rb file.
    </p>
    <p>
      Here are the formats that have been configured for this application (including Rails' default formats).
    </p>
    <% # http://www.foragoodstrftime.com/ %>
    <%- today, now = Date.current, Time.current %>
    <h3>Date Formats</h3>
    <table class="table table-condensed">
      <tr>
        <th>Format</th>
        <th>Example</th>
        <th>Formatter</th>
      </tr>
      <tr>
        <td><i>default</i></td>
        <td><%= today.to_s %></td>
        <td></td>
      </tr>
      <%- Date::DATE_FORMATS.sort.each do |format, formatter| %>
          <tr>
          <td>:<%= format %></td>
          <td><%= today.to_s(format) %></td>
          <td><%= formatter.respond_to?(:call) ? 'Dynamic Proc'.freeze : formatter %></td>
          </tr>
      <%- end %>
    </table>
    <h3>Time Formats</h3>
    <table class="table table-condensed">
      <tr>
        <th>Format</th>
        <th>Example</th>
        <th>Formatter</th>
      </tr>
      <tr>
        <td><i>default</i></td>
        <td><%= now.to_s %></td>
        <td></td>
      </tr>
      <%- Time::DATE_FORMATS.sort.each do |format, formatter| %>
          <tr>
            <td>:<%= format %></td>
            <td><%= now.to_s(format) %></td>
            <td><%= formatter.respond_to?(:call) ? 'Dynamic Proc'.freeze : formatter %></td>
          </tr>
      <%- end %>
    </table>
  </div>
</div>
