<h1>Rails Overview</h1>

<pre>
Rails Version = <%= Rails::VERSION::STRING %>
Environment = <%= Rails.env %>
Root = <%= Rails.root %>
Timezone = <%= Rails.configuration.time_zone %>
Log Level = <%= Rails.configuration.log_level %>
</pre>

<ul class="nav nav-tabs" role="tablist">
  <li class="active"><a href="#config" role="tab" data-toggle="tab">Configuration</a></li>
  <li><a href="#load_paths" role="tab" data-toggle="tab">Load Paths</a></li>
  <li><a href="#initializers" role="tab" data-toggle="tab">Initializers</a></li>
  <li><a href="#middleware" role="tab" data-toggle="tab">Middleware</a></li>
  <li><a href="#railties" role="tab" data-toggle="tab">Railties</a></li>
  <li><a href="#timedate" role="tab" data-toggle="tab">Time and Date Formats</a></li>
</ul>

<div class="tab-content">
  <div class="tab-pane active" id="config">
    <p>
      Rails configuration is managed through the applications's config/application.rb, an environment-specific configuration file, and initializers from the config/initializers directory.
    </p>
    <p>
      The combined results of these configurations are shown here:
    </p>
    <table class="table table-condensed">
      <tr>
        <th>Setting</th>
        <th>Value</th>
        <th>Description</th>
      </tr>
      <tr>
        <td>config.asset_host</td>
        <td><%= Rails.configuration.asset_host %></td>
        <td>
           Sets the host for the assets. Useful when CDNs are used for hosting assets, or when you want to work around the concurrency constraints built-in in browsers using different domain aliases. Shorter version of config.action_controller.asset_host.
        </td>
      </tr>
      <tr>
        <td>config.beginning_of_week</td>
        <td><%= Rails.configuration.beginning_of_week %></td>
        <td>
          Sets the default beginning of week for the application. Accepts a valid week day symbol (e.g. :monday).
        </td>
      </tr>
    </table>

    <div class="panel panel-warning">
      <div class="panel-heading">
        <h4 class="panel-title" data-toggle="collapse" data-target="#rails_config_instances">Instance Variables</h4>
      </div>
      <div id="rails_config_instances" class="panel-body collapse">
        <dl class="dl-horizontal">
          <%- Rails.configuration.instance_variables.sort.each do |symbol| %>
              <dt><%= symbol %></dt>
              <dd><samp><%= Rails.configuration.instance_variable_get(symbol) %></samp></dd>
          <%- end %>
        </dl>
      </div>
    </div>
  </div>
  <div class="tab-pane" id="load_paths">
    <p>
      Rails will load code based on the configured load paths with the
      help of ActiveSupport.
      <ul>
        <li>
          Autoload - Files will be searched here to auto
          load classes based on naming convention
        </li>
        <li>
          Autoload Once - A subset of autoload that will not be reloaded
          when class caching is disabled (default for development)
        </li>
        <li>
          Eager Load - All classes here will be loaded when eager loading
          is configured (default for production)
        </li>
      </ul>
      The runtime load paths are determined by configuration (typically in
      <code>application.rb</code>), Rails' default load paths
      (e.g. <code>app/*</code>), paths contributed by Engines, and direct API
      calls to <code>ActiveSupport::Dependecies</code>.
    </p>
    <p>
      <i>Ideally, all directories should exist.</i>
    </p>

    <%- all_load_paths = (Rails.application.send(:_all_load_paths) + ActiveSupport::Dependencies.autoload_paths).uniq -%>

    <%- all_autoload_paths = Rails.application.send(:_all_autoload_paths) -%>
    <%- all_autoload_once_paths = Rails.application.send(:_all_autoload_once_paths) -%>

    <%- config_eager_load_paths = Rails.configuration.eager_load_paths -%>
    <%- config_autoload_paths = Rails.configuration.autoload_paths -%>
    <%- config_autoload_once_paths = Rails.configuration.autoload_once_paths -%>

    <h3>Load Paths</h3>

    <table class="table table-condensed">
      <tr>
        <th>Path</th>
        <th>Autoload?</th>
        <th>Autoload Once?</th>
        <th>Eager Load?</th>
        <th>Config Autoload?</th>
        <th>Config Autoload Once?</th>
        <th>Exists?</th>
      </tr>
      <% all_load_paths.each do |path| %>
        <tr>
          <td><%= path %></td>
          <td><%= truth_label(all_autoload_paths.include?(path)) %></td>
          <td><%= truth_label(all_autoload_once_paths.include?(path)) %></td>
          <td><%= truth_label(config_eager_load_paths.include?(path)) %></td>
          <td><%= truth_label(config_autoload_paths.include?(path)) %></td>
          <td><%= truth_label(config_autoload_once_paths.include?(path)) %></td>
          <td><%= truth_label(File.directory?(path)) %></td>
        </tr>
      <% end %>
    </table>
  </div>
  <div class="tab-pane" id="initializers">
    <p>Rails initializers are blocks of code that run during application initialization.</p>
    <p>Initializers can be provided by any Railtie, which includes Rails components themselves as well as many Gems.</p>
    <table class="table table-condensed">
      <tr><th>#</th><th>Name</th><th>Context Class</th><th>Group</th><th>After</th><th>Before</th></tr>
    <%- idx = 0 %>
    <%- Rails.application.initializers.tsort_each do |initializer| %>
      <%- options = initializer.instance_variable_get('@options'.freeze) %>
      <tr>
        <td><%= idx+=1 %></td>
        <td><%= initializer.name.inspect %></td>
        <td><%= initializer.instance_variable_get('@context'.freeze).class.name %></td>
        <td><%= options.try(:[],:group).try(:inspect) %></td>
        <td><%= options.try(:[],:after).try(:inspect) %></td>
        <td><%= options.try(:[],:before).try(:inspect) %></td>
      </tr>
    <%- end %>
    </table>
  </div>
  <div class="tab-pane" id="middleware">
    <p>The Rack middleware configuration shows the modules in the Rack stack that will process the request and response.</p>
    <ol>
      <%- Rails.application.middleware.each do |middleware| %>
          <li><%= middleware.name %></li>
      <%- end %>
    </ol>
  </div>
  <div class="tab-pane" id="railties">
    <p>
      Railties are components of the Rails framework or any other component that needs to interact directly with the framework.
    </p>
    <p>
      The configuration order of the Railties can be specified if necessary.
    </p>
    <p>
      Rails configuration.railties_order = <%= Rails.configuration.railties_order %>
    </p>
    <ol>
      <%- # TODO: protected methods `ordered_railties` changed to return an array of arrays between rails 4.1.5 and 4.1.8. investigate and replace. -%>
      <%- ordered_railties = Rails.application.send(:ordered_railties) -%>
      <%- ordered_railties = ordered_railties[0] if ordered_railties.is_a?(Array) && ordered_railties[0].is_a?(Array) -%>
      <%- ordered_railties.each do |railtie| %>
          <li><%= railtie.railtie_name %> - <%= railtie.class.name %></li>
      <%- end %>
    </ol>
  </div>
  <div class="tab-pane" id="timedate">
    <p>
      Rails date and time formats are usually configured in a config/initializers/date_formats.rb file.
    </p>
    <p>
      Here are the formats that have been configured for this application (including Rails' default formats).
    </p>
    <% # http://www.foragoodstrftime.com/ %>
    <%- today, now = Date.today, Time.now %>
    <h3>Date Formats</h3>
    <table class="table table-condensed">
      <tr>
        <th>Format</th>
        <th>Example</th>
        <th>Formatter</th>
      </tr>
      <tr>
        <td><i>default</i></td>
        <td><%= today.to_s %></td>
        <td></td>
      </tr>
      <%- Date::DATE_FORMATS.sort.each do |format,formatter| %>
          <tr>
          <td>:<%= format %></td>
          <td><%= today.to_s(format) %></td>
          <td><%= formatter.respond_to?(:call) ? 'Dynamic Proc'.freeze : formatter %></td>
          </tr>
      <%- end %>
    </table>
    <h3>Time Formats</h3>
    <table class="table table-condensed">
      <tr>
        <th>Format</th>
        <th>Example</th>
        <th>Formatter</th>
      </tr>
      <tr>
        <td><i>default</i></td>
        <td><%= now.to_s %></td>
        <td></td>
      </tr>
      <%- Time::DATE_FORMATS.sort.each do |format,formatter| %>
          <tr>
            <td>:<%= format %></td>
            <td><%= today.to_s(format) %></td>
            <td><%= formatter.respond_to?(:call) ? 'Dynamic Proc'.freeze : formatter %></td>
          </tr>
      <%- end %>
    </table>
  </div>
</div>
