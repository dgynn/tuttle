<%
  # Copied from https://github.com/petergoldstein/dalli
  dalli_options = {
    expires_in: "Global default for key TTL. Default is 0, which means no expiry.",
    namespace: "If specified, prepends each key with this value to provide simple namespacing. Default is nil.",
    failover:" Boolean, if true Dalli will failover to another server if the main server for a key is down. Default is true.",
    threadsafe: "Boolean. If true Dalli ensures that only one thread is using a socket at a given time. Default is true. Set to false at your own peril.",
    serializer: "The serializer to use for objects being stored (ex. JSON). Default is Marshal.",
    compress: "Boolean, if true Dalli will gzip-compress values larger than 1K. Default is false.",
    compression_min_size: "Minimum value byte size for which to attempt compression. Default is 1K.",
    compression_max_size: "Maximum value byte size for which to attempt compression. Default is unlimited.",
    compressor: "The compressor to use for objects being stored. Default is zlib, implemented under Dalli::Compressor. If serving compressed data using nginx's HttpMemcachedModule, set memcached_gzip_flag 2 and use Dalli::GzipCompressor",
    keepalive: "Boolean. If true, Dalli will enable keep-alive for socket connections. Default is true.",
    socket_timeout: "Timeout for all socket operations (connect, read, write). Default is 0.5.",
    socket_max_failures: "When a socket operation fails after socket_timeout, the same operation is retried. This is to not immediately mark a server down when there's a very slight network problem. Default is 2.",
    socket_failure_delay: "Before retrying a socket operation, the process sleeps for this amount of time. Default is 0.01. Set to nil for no delay.",
    down_retry_delay: "When a server has been marked down due to many failures, the server will be checked again for being alive only after this amount of time. Don't set this value too low, otherwise each request which tries the failed server might hang for the maximum socket_timeout. Default is 1 second.",
    value_max_bytes: "The maximum size of a value in memcached. Defaults to 1MB, this can be increased with memcached's -I parameter. You must also configure Dalli to allow the larger size here.",
    error_when_over_max_size: "Boolean. If true, Dalli will throw a Dalli::ValueOverMaxSize exception when trying to store data larger than value_max_bytes. Defaults to false, meaning only a warning is logged.",
    username: "The username to use for authenticating this client instance against a SASL-enabled memcached server. Heroku users should not need to use this normally.",
    password: "The password to use for authenticating this client instance against a SASL-enabled memcached server. Heroku users should not need to use this normally.",
    sndbuf: "In bytes, set the socket SO_SNDBUF. Defaults to operating system default.",
    rcvbuf: "In bytes, set the socket SO_RCVBUF. Defaults to operating system default.",
    cache_nils: "Boolean. If true Dalli will not treat cached nil values as 'not found' for #fetch operations. Default is false.",
}
  # TODO: more specifics on servers and pool (including connection_pool gem)
%>

<h2 id="cache-internals">Dalli/Memcache Options</h2>
<table class="table table-condensed not-wide">
  <tr>
    <th>Setting</th>
    <th>Option Setting</th>
    <th>Description</th>
  </tr>
  <% dalli_options.each do |key, description| %>
    <tr>
      <td><%= key.inspect %></td>
      <td><code><%= @cache.options[key].inspect %></code></td>
      <td><%= description %></td>
    </tr>
  <% end %>
</table>

<%- if @cache.respond_to?(:stats) %>
  <h4>MemCache Stats</h4>
  <table class="table table-condensed not-wide">
    <tr>
      <th>Stat<br></th>
      <th>Value</th>
    </tr>
    <% @cache.stats.each do |server, stats| %>
      <tr>
        <td colspan="2">Server: <%= server %></td>
      </tr>
      <% stats.each do |k, v| %>
        <tr>
          <td><%= k %></td>
          <td><%= v %></td>
        </tr>
      <% end %>
    <% end %>
  </table>
<%- end %>

