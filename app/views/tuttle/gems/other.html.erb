<h1>Other Gems</h1>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Performance Libraries</h3>
  </div>
  <div class="panel-body">
    <p>
      Various gems are often included in applications to eke out a bit more performance.
      Here are various gems which may be helpful.
    </p>
    <p><a href="https://github.com/SamSaffron/fast_blank">fast_blank</a> - <%= truth_label("TEST".methods.include?(:blank_as?), 'installed', 'not installed') %></p>
  </div>
  <div class="panel-footer">
  </div>
</div>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Work In Progress</h3>
  </div>
  <div class="panel-body">
    <p>Much of Tuttle is a work in progress. But these bits are still under development...</p>
    <ul>
      <li><%= link_to 'Request Inspector', '/tuttle/request' %></li>
      <% if defined?(ActiveModel::Serializer) || defined?(ActiveModelSerializers) %>
      <li><%= link_to 'ActiveModel Serializers', '/tuttle/active_model_serializers' %> -  (0.9 and 0.10 support)</li>
      <% end %>
      <% if defined?(::Rack::MiniProfiler::ClientSettings) %>
        <li><%= link_to 'Rack::MiniProfiler', rack_mini_profiler_path %></li>
      <% end %>
    </ul>
  </div>
  <div class="panel-footer">
  </div>
</div>

<a id="request-profiler"></a>
<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Experimental Request Profiler</h3>
  </div>
  <div class="panel-body">
    <p>
      Tuttle includes an optional middleware (Tuttle::Middleware::RequestProfiler)
      to assist with memory and CPU profiling using the
      <code>memory_profiler</code> and <code>ruby-prof</code> gems.
    </p>
    <p>
      This middleware provides the ability to profile individual requests on demand
      and to vary the profiling options.
    </p>
    <h4>Middleware Installation</h4>
    <p>
      Middleware loaded? <%= truth_label(defined?(Tuttle::Middleware::RequestProfiler)) %>
    </p>
    <% if defined?(Tuttle::Middleware::RequestProfiler) && middleware_position = Rails.application.config.middleware.middlewares.index(Tuttle::Middleware::RequestProfiler) %>
      <p>
        Middleware stack position: <%= middleware_position + 1 %>
      </p>
      <br/>

      <h4>Memory Profiling <%= truth_label(defined?(MemoryProfiler), 'available', 'not available') %></h4>
      <p>Profile memory allocation using <code>memory_profiler</code> with <code>tuttle-profiler=memory_profiler</code> query param.</p>
      <p>
        Additional parameters can include:
      </p>
      <ul>
        <li><code>memory_profiler_allow_files</code> - Regexp pattern for files to be included</li>
        <li><code>memory_profiler_ignore_files</code> - Regexp pattern for files to be ignored</li>
        <li><code>memory_profiler_top</code> - Number of lines to include in report (defaults to 50)</li>
      </ul>
      <p>Example:
        <% example_url = main_app_root_url + '?tuttle-profiler=memory_profiler' %>
        <%= link_to example_url, example_url %>
      </p>
      <br/>

      <h4>CPU Profiling <%= truth_label(defined?(RubyProf), 'available', 'not available') %></h4>
      <p>Profile CPU usage using <code>ruby-prof</code> with <code>tuttle-profiler=ruby-prof</code> query param.</p>
      <p>
        Specify the profile type with a <code>ruby-prof_printer</code> parameter:
        <ul>
          <li><code>stack</code> - (Default) Visualization of the call hierarchy with time spent in each method</li>
          <li><code>fast_stack</code> - Fast version of stack (without colors or links)</li>
          <li><code>flat</code> - Overall time spent in each method</li>
          <li><code>graph</code> - Time spent in each method and callers/callees</li>
        </ul>
      <p>Example:
        <% example_url = main_app_root_url + '?tuttle-profiler=ruby-prof&ruby-prof_printer=fast_stack' %>
        <%= link_to example_url, example_url %>
      </p>

    <% else %>
      <p>
        You can include this middleware by configuring it in an initializer.
        It can be put at the beginning of the stack to help profile the other middleware.
        Or it can be put at the end of the stack to focus on memory from the application.
      </p>
      <pre>
    require 'tuttle/middleware/request_profiler'
    # Add memory profiler middleware at beginning of the stack
    # Rails.application.config.middleware.insert(0, Tuttle::Middleware::RequestProfiler)

    # Add memory profiler middleware at the end of the stack
    Rails.application.config.middleware.use Tuttle::Middleware::RequestProfiler
      </pre>
    <% end %>

    <br/>
    <p>
      <em>Note: Ruby-prof also provides a middleware that saves profile results to a directory
        on the server for every request. And RackMiniProfiler includes this same
        memory_profiler capability but requires RackMiniProfiler to be enabled,
        which has an impact on profiling.</em>
    </p>
  </div>
  <div class="panel-footer">
  </div>
</div>

<div class="panel panel-default">
  <div class="panel-heading">
    <h3 class="panel-title">Facter</h3>
  </div>
  <div class="panel-body">
    <p>
      <a href="https://github.com/puppetlabs/facter">Facter</a> is a gem that will collect and display system facts.
      It is typically used by Puppet separately from your application.
      If the gem is available, those facts will be reported here by Tuttle.
    </p>

    <% if defined?(Facter) %>
      <p>Facter has collected the following information:</p>
      <dl class="dl-horizontal">
        <% Facter.to_hash.sort.each do |k, v| %>
          <dt><%= k %></dt><dd><%= v.inspect %></dd>
        <% end %>
      </dl>
    <% else %>
      <p class="alert alert-warning">
        <a href="https://github.com/puppetlabs/facter">Facter</a> is not available
      </p>
      <p>You can optionally require this gem (even if you do not use Puppet) by adding the following to your Gemfile.</p>
      <pre><code class="ruby">gem 'facter'</code></pre>
    <% end %>
  </div>
</div>
